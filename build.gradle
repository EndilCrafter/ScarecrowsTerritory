buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}
apply plugin: "net.minecraftforge.gradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "eclipse"
apply plugin: "org.spongepowered.mixin"

version = project.mod_version + "-forge-" + project.minecraft_suffix
group = project.maven_group
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_target)

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // Core library
    implementation fg.deobf("curse.maven:supermartijn642s-core-lib-454372:${project.core_library_file}")
    // Config library
    implementation fg.deobf("curse.maven:supermartijn642s-config-lib-438332:${project.config_library_file}")

    // Mixin
    implementation('org.spongepowered:mixin:0.8.3-SNAPSHOT') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
}

// Include resources generated by data generators.
sourceSets.main {
    resources.srcDir "src/generated/resources"
    // Make sure resources are available for 1.12
    output.setResourcesDir output.classesDirs.asPath
}

processResources {
    inputs.property "version", project.version

    filesMatching(["mcmod.info", "modid.mixins.json", "pack.mcmeta"]) {
        expand project.properties
    }

    rename "modid.mixins.json", "${project.mod_id}.mixins.json"
    rename "icon.png", "${project.mod_id}.png"
}

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    String resolved_core_plugin = "${project.mod_package}.${project.coremod_package}.${project.coremod_class}"
    String resolved_core_config = "${project.mod_id}.mixins.json"

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "fml.coreMods.load", resolved_core_plugin

            args "--mixin", resolved_core_config

            mods {
                source sourceSets.main
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "fml.coreMods.load", resolved_core_plugin

            args "--mixin", resolved_core_config

            mods {
                source sourceSets.main
            }
        }
    }
}

jar {
    from {
        configurations.compile
                .filter { "mixin-0.8.3-SNAPSHOT.jar" == it.name }
                .collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    manifest {
        attributes "FMLCorePlugin": "com.supermartijn642.scarecrowsterritory.core.CoreMod"
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
        attributes "MixinConfigs": "scarecrowsterritory.mixins.json"
    }
}

mixin {
    add sourceSets.main, "scarecrowsterritory.refmap.json"
}

sourceSets {
    main {
        resources { srcDir 'src/generated/resources' }
        output.resourcesDir = output.classesDirs.asPath
    }
}

jar.finalizedBy('reobfJar')